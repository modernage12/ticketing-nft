[Inizio Sessione] - Discussione Funzionalità Future: Abbiamo discusso le idee future post-MVP, scegliendo di concentrarci su:

Integrazione Wallet Esterni (Non-Custodial)
Creazione Eventi/NFT da UI
[~16:00 CEST] - Definizione Modello Ibrido Wallet: Hai chiarito di volere un sistema ibrido: gli utenti possono collegare un wallet esterno oppure usare un wallet interno gestito dal backend (custodial), per mantenere un'esperienza semplice per i neofiti.

[~16:05 CEST] - Avvio Fase A (Integrazione Wallet Esterno - Frontend): Abbiamo deciso di iniziare implementando la possibilità di collegare wallet esterni nel frontend Vue.

[~16:05 CEST] - Proposta Store Pinia: Ho fornito il codice iniziale per uno store Pinia (useWalletStore) da salvare in stores/wallet.js per gestire lo stato del wallet.

[~16:08 CEST] - Identificazione Componente UI: Dopo aver verificato che non esisteva un Navbar.vue dedicato, abbiamo identificato App.vue come il componente corretto dove inserire l'UI per la connessione del wallet (pulsante, stato).

[~16:10 CEST] - Prima Modifica App.vue: Ti ho fornito le modifiche per App.vue per importare e usare useWalletStore e aggiungere il blocco HTML/Vue per il pulsante "Collega Wallet" e lo stato della connessione nella navbar.

[~16:15 CEST] - Tentativo Push e Errore Git: Hai applicato le modifiche e hai tentato di fare git push, ma hai ricevuto l'errore rejected (fetch first) perché il repository remoto era più avanti di quello locale.

[~16:16 CEST] - Risoluzione Errore Git (pull/merge): Ti ho guidato nell'eseguire git pull origin main e nel confermare il messaggio del commit di merge che si è aperto nell'editor.

[~16:18 CEST] - Richiesta Annullamento Modifiche: Hai deciso di annullare le modifiche appena caricate su GitHub per poter testare meglio localmente prima.

[~16:20 CEST] - Annullamento Modifiche (revert): Ti ho guidato nel processo di git revert:

Identificazione dell'hash del commit da annullare (git log).
Esecuzione di git revert <hash>.
Conferma del messaggio del commit di revert nell'editor.
Esecuzione di git push origin main per caricare l'annullamento su GitHub e aggiornare i file locali allo stato precedente.
[~16:22 CEST] - Riavvio Implementazione Fase A (Locale):

Hai ricreato il file stores/wallet.js.
Hai fornito di nuovo il contenuto (revertito) di App.vue.
Ti ho fornito nuovamente le modifiche per App.vue (import store, uso store, UI wallet) con indicatori più chiari nel codice.
[~16:25 CEST] - Test Locale Positivo: Hai applicato le modifiche ad App.vue, avviato l'ambiente locale e confermato che il pulsante "Collega Wallet" ora è visibile, non ci sono errori nel terminale/console, e la connessione a MetaMask funziona correttamente.
[2025-04-18 16:37 CEST] - Aggiornamento Fase A: Risolto problema di disconnessione al cambio account. L'indirizzo nella UI ora si aggiorna correttamente (deferito aggiornamento del signer). Errore asincrono in console presente ma non bloccante.
[2025-04-18 16:43 CEST] - Aggiornamento Fase A: Implementata logica setUserWalletPreference nello store e UI temporanea in App.vue per testare la scelta tra wallet interno/esterno. Test locale conferma che la visibilità della sezione wallet esterno dipende correttamente dallo stato isUsingExternalWallet.
[2025-04-18 16:56 CEST] - Aggiornamento Fase A: Implementato flusso v2 per wallet ibrido. Rimossi controlli di test. Modificati App.vue e wallet.js per usare connect/disconnect come meccanismo di switch tra contesto wallet interno (default) ed esterno. Test locale conferma funzionamento base.
[2025-04-18 17:05 CEST] - Aggiornamento Fase A: Aggiunta funzione ensureSigner allo store useWalletStore (wallet.js) per verificare/aggiornare il signer del wallet esterno prima delle azioni future. Funzione definita ma non ancora utilizzata.
[2025-04-18 17:10 CEST] - Aggiornamento Persistenza Wallet: Modificata localmente tabella users in PostgreSQL aggiungendo colonna wallet_preference TEXT DEFAULT 'internal' NOT NULL.
[2025-04-18 17:16 CEST] - Aggiornamento Persistenza Wallet: Modificato backend (userService, authController) per leggere la colonna wallet_preference dal DB e includerla nella risposta API di login.
[2025-04-18 17:41 CEST] - Aggiornamento Ambiente: Configurato ambiente di sviluppo completamente locale: Frontend punta a Backend locale (http://localhost:3000), Backend punta a Database PostgreSQL locale.
[2025-04-18 17:47 CEST] - Aggiornamento Persistenza Wallet & Bugfix: Risolto errore TypeError: walletStore.resetState is not a function modificando logout in auth.js per chiamare disconnectWallet. Corretto funzionamento di login, logout e inizializzazione preferenza wallet nell'ambiente locale verificato.
[2025-04-18 17:58 CEST] - Aggiornamento Persistenza Wallet: Modificato App.vue per nascondere la sezione UI del wallet esterno se walletStore.isUsingExternalWallet è false. Test locale conferma che dopo il login con preferenza 'internal', la sezione wallet è correttamente nascosta.
[2025-04-18 18:05 CEST] - Aggiornamento Persistenza Wallet: Creata route /settings, link in App.vue e componente SettingsView.vue. Implementata UI e logica frontend in SettingsView.vue per visualizzare stato wallet (interno/esterno) e switchare modalità tramite connectWallet/disconnectWallet dello store. Test locale UI OK.
[2025-04-18 21:01 CEST] - Aggiornamento Persistenza Wallet: Completata implementazione e test della persistenza della preferenza wallet. L'utente può cambiare modalità (Interno/Esterno) dalla pagina Impostazioni, la scelta viene salvata nel DB tramite API backend e viene caricata correttamente al login successivo, aggiornando lo stato e la UI del frontend come previsto.
[2025-04-18 21:40 CEST] - Aggiornamento SIWE & DB: Aggiunta colonna external_wallet_address (TEXT NULL UNIQUE) e reso password_hash NULLable nella tabella users del DB locale. Implementata e esportata funzione findOrCreateUserByAddress in userService.js per gestire lookup/creazione utenti basata su indirizzo esterno. Backend pronto per verifica SIWE.
[2025-04-18 22:18 CEST] - Rimozione Aggiornamento SIWE: Annullata l'implementazione di SIWE etc riportato i file e il progetto alle condizioni prima di Aggiornamento SIWE & DB.
[2025-04-18 22:28 CEST] - Bugfix Login: Risolto problema login standard non funzionante reinserendo la funzione handleLogin mancante nel componente LoginView.vue. Login username/password ora funzionante.
[2025-04-19 10:32 CEST] - Feature Creazione Eventi: Aggiunto ruolo admin (colonna `is_admin` su `users` DB) e middleware di autorizzazione (`adminAuthMiddleware.js`). Aggiornata API login per restituire stato admin.
[2025-04-19 11:37 CEST] - Bugfix Creazione Eventi: Corretto percorso di import per l'istanza Axios in CreateEventView.vue (da @/services/api a @/axios-config).
[2025-04-19 11:42 CEST] - Bugfix Backend: Corretto l'uso dell'oggetto pool del database in adminAuthMiddleware.js per risolvere TypeError: db.query is not a function.
[2025-04-19 11:47 CEST] - Debug Creazione Eventi: Riscontrato errore 400 Bad Request dal backend con messaggio "Missing required event fields". Iniziata verifica middleware express.json, nomi campi payload e logica controller backend.
[2025-04-19 11:50 CEST] - Bugfix Creazione Eventi: Corretta discrepanza nome campo tra frontend (total_tickets) e backend (totalTickets) per risolvere errore 400 Bad Request. Modificato frontend per inviare totalTickets.
[2025-04-19 11:53 CEST] - Debug Creazione Eventi: Riscontrato nuovo errore TypeError: db.query is not a function in eventService.js. Causa identificata come import/uso errato del pool DB.
[2025-04-19 11:58 CEST] - Debug Creazione Eventi: Riscontrato errore DB colonna "image_url" non esiste. Identificata discrepanza tra query INSERT in eventService.js e schema tabella events. Proposte opzioni: aggiungere colonna al DB o rimuoverla dalla query.
[2025-04-19 12:04 CEST] - Fix Creazione Eventi: Corretto messaggio di successo in CreateEventView.vue per usare response.data.event.name e response.data.event.event_id.
[2025-04-19 12:04 CEST] - Feature Creazione Eventi: Aggiunto campo "Descrizione" al form e alla logica di CreateEventView.vue.
[2025-04-19 12:11 CEST] - Fix Visualizzazione Prezzi: Modificato EventsView.vue per usare ethers.formatEther e mostrare i prezzi degli eventi (letti da original_price in Wei) correttamente in MATIC.
[2025-04-19 12:17 CEST] - Feature Creazione Eventi: Completata implementazione e debugging end-to-end. Funzionalità confermata.
[2025-04-19 ~12:25 CEST] - Feature Ruolo Creator: Aggiunta colonna `is_creator` (BOOLEAN DEFAULT false NOT NULL) a tabella `users` nel DB PostgreSQL.
[2025-04-19 ~12:27 CEST] - Feature Ruolo Creator: Rinominato middleware `adminAuthMiddleware.js` in `eventMgmtAuthMiddleware.js`. Modificato per selezionare `is_creator` dal DB e permettere accesso se `user.is_admin` O `user.is_creator`. Aggiunto `isCreator` a `req.user`.
[2025-04-19 ~12:28 CEST] - Feature Ruolo Creator: Aggiornata route `POST /api/events` in `eventRoutes.js` per usare il nuovo middleware `eventMgmtAuthMiddleware`.
[2025-04-19 ~12:30 CEST] - Feature Ruolo Creator: Aggiornata API `POST /api/auth/login` (in `authController.js`) per includere lo stato `is_creator` nel payload del JWT e nell'oggetto `user` della risposta JSON.
[2025-04-19 ~13:23 CEST] - Bugfix Backend: Corretto endpoint `GET /api/auth/me` (in `authController.js`) per recuperare dal DB e restituire correttamente lo stato `is_creator` dell'utente nella risposta JSON.
[2025-04-19 ~13:25 CEST] - Feature Ruolo Creator: Aggiornato store Pinia `stores/auth.js`: aggiunto stato `isCreator`, modificata azione `WorkspaceUser` per salvarlo, resettato in `logout`, esposto dallo store.
[2025-04-19 ~13:28 CEST] - Feature Ruolo Creator: Consolidato e corretto router guard (`router/index.js`) in un unico `beforeEach`. Modificata logica per rotte `meta.requiresAdmin` per consentire accesso se `authStore.isAdmin` O `authStore.isCreator`.
[2025-04-19 ~13:30 CEST]` - Fix UI: Aggiornato `v-if` per link/pulsante "Crea Evento" (in `App.vue` o navbar) per mostrarlo se `authStore.isLoggedIn && (authStore.isAdmin || authStore.isCreator)`.
[2025-04-19 ~13:35 CEST] - Feature Registrazione Creator: Aggiunta checkbox "Registrati come Organizzatore" in `RegisterView.vue` e aggiornata logica `handleRegister` per inviare il flag.
[2025-04-19 ~13:35 CEST] - Feature Registrazione Creator: Modificata API `POST /api/auth/register` (in `authController.js`) per accettare flag `registerAsCreator`.
[2025-04-19 ~13:35 CEST] - Feature Registrazione Creator: Modificata azione `register` in `authStore` per inviare il flag `registerAsCreator` al backend.
[2025-04-19 ~13:48 CEST] - Bugfix Backend: Risolto `ReferenceError: authService is not defined` in `authController.js` aggiungendo l'import mancante per il service corretto (`userService.js`).
[2025-04-19 ~13:51 CEST]` - Bugfix Backend: Corretta query `INSERT` in `userService.createUser` per includere colonne/placeholders/valori mancanti (`is_admin`, `is_creator`, `wallet_preference`) e risolvere errore mismatch parametri (`bind message provides 5 parameters, but prepared statement "" requires 4`).
[2025-04-19 ~13:53 CEST]` - Feature Registrazione Creator: Completata implementazione e test della registrazione utente con opzione Creator.
[2025-04-19 ~15:30 CEST] - Debug Hardhat Tests: Riscontrato errore persistente "incorrect number of arguments to constructor" durante il deploy di `TicketNFT` nel `beforeEach` di `Marketplace.test.js`, nonostante codice e configurazione apparissero corretti.
[2025-04-19 ~15:40 CEST] - Debug Hardhat Tests: Isolate le cause potenziali: escluso codice Solidity, configurazione Hardhat, dipendenze corrotte (via reinstallazione node_modules), versione Node/npm, backend in esecuzione.
[2025-04-19 ~15:55 CEST] - Debug Hardhat Tests: Il deploy di `TicketNFT` funzionava correttamente in `npx hardhat console` e in un file di test minimale separato (`SimpleDeploy.test.js`), ma falliva nel contesto di `Marketplace.test.js` (anche con codice minimale o dopo rinomina).
[2025-04-19 ~16:10 CEST] - Debug Hardhat Tests: Identificato il problema come uno stato/cache corrotto legato al file `Marketplace.test.js` originale nell'ambiente `npx hardhat test`.
[2025-04-19 ~16:15 CEST] - Sviluppo Test: Risolto il problema di deploy nel test sovrascrivendo `Marketplace.test.js` con il codice minimale funzionante (originariamente da `SimpleDeploy.test.js`) e rinominando il describe block principale.
[2025-04-19 ~16:20 CEST] - Sviluppo Test: Ricostruito gradualmente il blocco `beforeEach` in `Marketplace.test.js`, includendo deploy di `TicketNFT`, deploy di `Marketplace`, minting del token di test e approvazione da parte del seller. Il setup completo ora viene eseguito correttamente.
[2025-04-19 ~16:23 CEST] - Sviluppo Test: Ripristinati e verificati i test case per `Deployment`, `Listing Items`, `Buying Items`, `Canceling Listings` e `Owner Functions` all'interno di `Marketplace.test.js`.
[2025-04-19 ~15:40 CEST] - Sviluppo Smart Contract: Avviata implementazione flusso pagamento primario (minting con commissione) in `TicketNFT.sol`.
[2025-04-19 ~15:45 CEST] - Sviluppo Smart Contract: Scelte di design per `TicketNFT.sol`:
    - Creata nuova funzione `public payable buyAndMintTicket(eventId)` per acquisto utente.
    - Mantenuta `mintTicket(...)` come `onlyOwner` per minting controllato.
    - Aggiunta funzione `onlyOwner registerEvent(eventId, creatorAddress, originalPrice)` per registrare eventi on-chain.
    - Aggiunte mapping `eventCreators` e `eventOriginalPrices`.
    - `TicketNFT` leggerà percentuale commissione e wallet servizio dal contratto `Marketplace` associato per coerenza.
    - Aggiunto riferimento immutabile a `Marketplace` nel costruttore di `TicketNFT`.
[2025-04-19 ~16:35 CEST] - Sviluppo Smart Contract: Implementate modifiche in `TicketNFT.sol`: aggiunti import, variabili stato (marketplaceContract, mapping eventi), evento `EventRegistered`, costruttore aggiornato, funzioni `registerEvent`, `_createTicket` (internal), `buyAndMintTicket` (payable), `mintTicket` (refactoring per usare _createTicket). Utilizzo di `.call{value: ...}("")` per trasferimenti ETH.
[2025-04-19 15:38 CEST] - Sviluppo Smart Contract: Compilazione di `TicketNFT.sol` aggiornato completata con successo.
[2025-04-19 ~16:55 CEST] - Sviluppo Backend: Modificato `eventController.js` (`createEvent`) per recuperare `creatorAddress` da `req.user` e passarlo a `eventService`.
[2025-04-19 ~17:00 CEST] - Sviluppo Backend: Modificato `eventService.js` (`createEvent`) per:
    - Accettare `creatorAddress`.
    - Dopo l'inserimento dell'evento nel DB, chiamare la funzione `registerEvent(eventId, creatorAddress, originalPrice)` sullo smart contract `TicketNFT` usando il wallet owner (da .env).
    - Aggiunta gestione base degli errori per la chiamata on-chain (logging).
[2025-04-19 ~17:01 CEST] - Sviluppo Backend: Identificata necessità di verificare/configurare `config/ethers.js` per esportare correttamente provider, owner wallet (minterWallet) e istanza contratto `ticketNFTContract` con indirizzo/ABI corretti per la rete Amoy.
[2025-04-20 ~11:55 CEST] - Sviluppo Backend: Risolti errori di avvio (`SyntaxError: Identifier '...' has already been declared` per `pool` e `minterWallet`) in `eventService.js` rimuovendo dichiarazioni duplicate.
[2025-04-20 ~11:56 CEST] - Sviluppo Backend: Corretto file `config/ethers.js` per inizializzare ed esportare correttamente `minterWallet` (owner signer) leggendo `PRIVATE_KEY` da `.env`.
[2025-04-20 ~11:57 CEST] - Sviluppo Backend: Backend avviato con successo dopo le correzioni. Pronto per testare l'endpoint `POST /api/events` e la chiamata on-chain `registerEvent`.
[2025-04-20 ~11:50 CEST] - Bugfix Backend: Modificato `eventMgmtAuthMiddleware.js` per recuperare anche `wallet_address` dal DB e aggiungerlo come `walletAddress` all'oggetto `req.user`.
[2025-04-20 ~11:49 CEST] - Test Funzionale: Eseguito test end-to-end per `POST /api/events`. Creazione evento nel DB e chiamata on-chain `registerEvent` a `TicketNFT` (Amoy) completate con successo.
[2025-04-20 ~12:49 CEST] - Fix Deploy & Config: Corretto script deploy.js per gestire dipendenza circolare TicketNFT<->Marketplace e costruttori; modificato TicketNFT.sol (rimosso immutable, aggiunto setter); rieseguiti deploy; aggiornati indirizzi/ABI/chiave owner nel backend.
[2025-04-20 ~12:49 CEST] - Test Funzionale E2E: Eseguito test end-to-end per `POST /api/events` dopo correzioni deploy/config. Creazione evento DB (ID 12) e chiamata+conferma on-chain `registerEvent` (tx: 0xb343...) completate con SUCCESSO.
[2025-04-20 ~12:55 CEST] - Sviluppo Backend: Inizio adattamento flusso acquisto primario (API POST /api/events/:eventId/buy). L'obiettivo è modificare controller/service per usare la funzione payable buyAndMintTicket(eventId) del contratto TicketNFT, gestendo il recupero chiave utente, calcolo costo+fee e invio transazione con msg.value.
[2025-04-20 ~20:10 CEST] - Fix Configurazione Contratti: Risolto errore `marketplaceContract.serviceFeeBasisPoints is not a function` assicurando che gli ABI JSON aggiornati (da `packages/contracts/artifacts/...`) siano copiati manualmente nella directory `packages/backend/src/contracts/abi/` dopo ogni ricompilazione/deploy dei contratti. Verificato anche l'indirizzo del contratto nel file `.env` e riavviato il backend.
[2025-04-20 ~20:10 CEST] - Debug Acquisto Primario: Identificato nuovo errore nel flusso `purchasePrimaryTicket`: `Error: Chiave privata criptata non trovata per l'utente X`. L'errore si verifica in `userService.getUserSigner` quando si tenta di recuperare la chiave privata dell'utente dal DB per firmare la transazione on-chain. Causa probabile: dati incompleti per l'utente di test nel DB (chiave `NULL`).
[2025-04-20 ~20:36 CEST] - Fix Aggiornamento DB Tickets: Risolto errore DB `"la colonna "ticket_id" non esiste"` modificando la query `INSERT INTO tickets` in `eventService.js` (funzione `purchasePrimaryTicket`) per usare `RETURNING db_ticket_id`, corrispondente al nome effettivo della colonna nel DB locale.
[2025-04-20 ~20:36 CEST] - Completamento Flusso Acquisto Primario (Backend): Il flusso API `POST /api/events/:eventId/buy` è ora completo e funzionante. Include: chiamata on-chain `buyAndMintTicket` firmata dall'utente, estrazione del `tokenId` dai log della transazione e aggiornamento delle tabelle `tickets` (INSERT) e `events` (UPDATE `tickets_minted`) nel DB.
[2025-04-20 ~21:10 CEST] - Fix Asynchronous Event Creation: Risolto `ReferenceError: serviceResult is not defined` in `eventController.js` rinominando correttamente la variabile che riceve il risultato da `eventService.createEvent`.
[2025-04-20 ~21:10 CEST] - Successo Gestione Asincrona Creazione Evento: L'API `POST /api/events` ora gestisce la registrazione on-chain (`registerEvent`) in modo asincrono. Salva l'evento nel DB, invia la transazione on-chain e restituisce immediatamente la risposta al frontend (con i dati dell'evento e l'hash della transazione), risolvendo il problema del timeout. La conferma della transazione on-chain viene loggata in background.
[2025-04-20 ~21:14 CEST] - Prossimo Passo Definito: Avvio implementazione backend per acquisto secondario (Marketplace P2P). Focus sulla logica API e service per `POST /api/marketplace/buy`.
[2025-04-22 ~16:59 CEST] - Sviluppo Backend P2P: Implementata logica service purchaseSecondaryTicket in marketplaceService.js (recupero listing/fee, chiamata buyItem con signer acquirente, aggiornamento DB).
[2025-04-22 ~16:59 CEST] - Bugfix Backend P2P: Corretto recupero listing in purchaseSecondaryTicket per usare listingId e indirizzo contract NFT corretto nel WHERE.
[2025-04-22 ~16:59 CEST] - Bugfix Backend P2P: Aggiunto import mancante di userService in marketplaceService.js.
[2025-04-22 ~16:59 CEST] - Test Backend P2P: Eseguito test end-to-end con successo per API POST /api/marketplace/buy/:listingId. Acquisto secondario funzionante.
[2025-04-22 ~17:25 CEST] - Sviluppo Frontend P2P: Aggiunta azione buyFromMarketplace ad authStore per chiamare API POST /api/marketplace/buy/:listingId.
[2025-04-22 ~17:25 CEST] - Sviluppo Frontend P2P: Modificato MarketplaceView.vue per usare la nuova azione buyFromMarketplace (passando listing_id) e gestirne la risposta.
[2025-04-22 ~17:25 CEST] - Debug Frontend P2P: Risolto errore 404 dovuto a errata costruzione URL API in auth.js (problema con template literal/caratteri).
[2025-04-22 ~17:25 CEST] - Test Frontend P2P: Eseguito test end-to-end con successo per acquisto P2P tramite UI Marketplace. Funzionalità confermata.
[2025-04-22 ~17:55 CEST] - Test Frontend P2P: Test per List/Cancel da UI MyTicketsView completati con successo.
[2025-04-22 ~17:55 CEST] - **[INIZIO FASE B] Integrazione Wallet Esterno:** Avviata implementazione per gestione azioni utente (Marketplace P2P, Acquisto Primario, Creazione Eventi) tramite wallet esterno (MetaMask) quando selezionato.
[2025-04-22 ~17:55 CEST] - Fase B.1 (Frontend P2P): Inizio modifiche a MyTicketsView.vue e MarketplaceView.vue per aggiungere logica condizionale (isUsingExternalWallet) e chiamate dirette a smart contract (approve, listItem, cancelListing, buyItem) tramite signer MetaMask.